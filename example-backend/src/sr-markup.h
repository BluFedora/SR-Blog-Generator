#ifndef SR_MARKUP_H
#define SR_MARKUP_H

/*
 * Warning, this file is auto-generated by cbindgen. 
 * Don't modify this manually. 
 */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
struct ASTNode;

typedef struct StringView {
  const char *str_start;
  const char *str_end;
} StringView;

typedef struct ASTNodeListView {
  uint32_t num_nodes;
  const ASTNode *nodes;
} ASTNodeListView;

typedef enum ASTNodeLiteralValue_Tag {
  AsStr,
  AsNumber,
  AsBoolean,
} ASTNodeLiteralValue_Tag;

typedef struct AsStr_Body {
  StringView value;
} AsStr_Body;

typedef struct AsNumber_Body {
  double value;
} AsNumber_Body;

typedef struct AsBoolean_Body {
  bool value;
} AsBoolean_Body;

typedef struct ASTNodeLiteralValue {
  ASTNodeLiteralValue_Tag tag;
  union {
    AsStr_Body as_str;
    AsNumber_Body as_number;
    AsBoolean_Body as_boolean;
  };
} ASTNodeLiteralValue;

typedef struct TagAttributeView {
  StringView key;
  ASTNodeLiteralValue value;
} TagAttributeView;

typedef enum ASTNode_Tag {
  ASTNode_TagNode,
  ASTNode_TextNode,
  ASTNode_LiteralNode,
} ASTNode_Tag;

typedef struct ASTNode_TagNode_Body {
  StringView text;
  ASTNodeListView children;
  uint32_t num_attributes;
  const TagAttributeView *attributes;
} ASTNode_TagNode_Body;

typedef struct ASTNode_TextNode_Body {
  StringView text;
} ASTNode_TextNode_Body;

typedef struct ASTNode_LiteralNode_Body {
  ASTNodeLiteralValue value;
} ASTNode_LiteralNode_Body;

typedef struct ASTNode {
  ASTNode_Tag tag;
  union {
    ASTNode_TagNode_Body tag_node;
    ASTNode_TextNode_Body text_node;
    ASTNode_LiteralNode_Body literal_node;
  };
} ASTNode;

typedef struct Arguments {
  uint32_t num_args;
  const StringView *args;
} Arguments;

#endif /* SR_MARKUP_H */
